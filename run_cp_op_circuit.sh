#!/usr/bin/bash

set -eu
function catch {
    echo "Error: Logic-BIST-Sim is failed!" >&2
}
trap catch ERR

function finally {
	if [ -e ${APP_DIR}/fault_list.dat ]; then
    	mv ${APP_DIR}/fault_list.dat ${APP_DIR}/${CIRCUIT_NAME}_fault_list.dat
		mv ${APP_DIR}/${CIRCUIT_NAME}_fault_list.dat ${FLT_LIST_PATH}
	fi
    rm -f ${APP_DIR}/${CIRCUIT_NAME}_lfsr_pi.dat ${APP_DIR}/${CIRCUIT_NAME}_tgl_gt_tpi.dat ${APP_DIR}/${CIRCUIT_NAME}_tgl_gt_input.dat ${APP_DIR}/ff_station_${CIRCUIT_NAME}.dat
}
trap finally EXIT

TPG=0
TEST_VEC=100000 # Number of Test patterns
TOOLMODE=4
CAPTURE=10 #the number of capture cycles
OBRATE=0.2 #ratio of OP FF
LCP_rate=0.01 #the ratio of Logic CPs in all logic gates
CP_CTRL=1 #=0:non CP control, =1: Logic gate toggling, =4: applying random patterns to Logic CPs
SKIP_CAP=3 # the CP control starts from the third capture cycle.
INTERVAL_CYCLE=1 #=1: the number of interval cycles

APP_DIR=$(dirname $0)

CIRCUIT_PATH=$1
if [ ! -e ${CIRCUIT_PATH} ]; then 
    echo "cannot read Circuit File: $1" >&2
    exit 1
fi
CIRCUIT_NAME=$(basename ${CIRCUIT_PATH})

OP_PATH=$2
if [ ! -e ${OP_PATH} ]; then 
    echo "cannot read OP File: $2" >&2
    exit 1
fi

CP_PATH=$3
if [ ! -e ${CP_PATH} ]; then 
    echo "cannot read CP File: $3" >&2
    exit 1
fi

if [ ! -e ${APP_DIR}/OUTPUTS/CPI/${CAPTURE}_cycles/ ]; then
    mkdir -p ${APP_DIR}/OUTPUTS/CPI/${CAPTURE}_cycles/
fi

if [ ! -e ${APP_DIR}/OUTPUTS/FLT_DET_LIST ]; then
    mkdir -p ${APP_DIR}/OUTPUTS/FLT_DET_LIST
fi

## FLT_LIST path check
FLT_LIST_PATH=${APP_DIR}/FLT_LIST
if [ ! -e ${FLT_LIST_PATH} ]; then
    mkdir -p ${FLT_LIST_PATH}
fi

if [ -e ${OP_PATH} ]; then
 	echo === OB_STATION INFO of ${OP_PATH} is FOUND, CONTINUE THE FAULT SIM PROCESS===
else
 	echo === NO OB_STATION INFO, PLEASE BACK TO FF_SELECTION PROCESS to Generate ${OP_PATH} === >&2
	exit 1
fi
ln -sf ${OP_PATH} ff_station_${CIRCUIT_NAME}.dat

LFSR_CONFIG_PATH=${APP_DIR}/src/lfsr.dat

${APP_DIR}/src/tpg/tpg/lfsr ${CIRCUIT_PATH} ${TEST_VEC} ${LFSR_CONFIG_PATH} ${CIRCUIT_NAME}_lfsr_pi.dat

## when CP runs in random loading mode, the random patterns will be pre-generated by the following Setting
if [ ${CP_CTRL} -eq 4 ]; then
	echo === Generate the LFSR Vectors 4 Logic_CPI Begin ===
	${APP_DIR}/src/tpg/tpg_TPI_gate/lfsr_gt ${CIRCUIT_PATH} ${TEST_VEC} ${LFSR_CONFIG_PATH} ${LCP_rate} ${CAPTURE} ${CIRCUIT_NAME}_tgl_gt_tpi.dat
 	echo === Generate the LFSR Vectors 4 Logic_CPI End ===
fi

if [ ${CP_CTRL} -eq 1 ] || [ ${CP_CTRL} -eq 4 ]; then
	echo "== simulation for Logic CPI =="
	ln -sf ${CP_PATH} ${CIRCUIT_NAME}_tgl_gt_input.dat
	echo === ${CIRCUIT_NAME}: ${INTERVAL_CYCLE} ===
	${APP_DIR}/src/simulator/sim ${CIRCUIT_PATH} ${TOOLMODE} ${TPG} ${CP_CTRL} ${LCP_rate} ${CAPTURE} ${INTERVAL_CYCLE} ${SKIP_CAP} 1 ${OBRATE} 1 ${TEST_VEC}
	echo ===logic CPI simulation process end===
fi


